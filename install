#!/usr/bin/env php

<?php
/**
 * Created by PhpStorm.
 * User: comrade
 * Date: 05.03.19
 * Time: 13:48
 */

require_once 'vendor/autoload.php';

makeDirWithPerm(__DIR__ . '/runtime/logs');
makeDirWithPerm(__DIR__ . '/runtime/cache');

makeDirWithPerm(__DIR__ . '/storage');
makeDirWithPerm(__DIR__ . '/web/public');

createEnv();

setWritable(__DIR__, [
    '/runtime/logs',
    '/runtime/cache',
    '/runtime',
    '/web/assets',

    '/storage',
    '/storage/'
]);

createDb();

/**
 * @param string $dir
 */
function makeDirWithPerm(string $dir): void
{
    if (!is_dir($dir)) {
        mkdir($dir);
        echo "      mkdir $dir\n";
    } else {
        echo "      dir $dir is exist\n";
    }
}

/**
 * @param $root
 * @param $paths
 */
function setWritable(string $root, array $paths): void
{
    foreach ($paths as $writable) {
        if (is_dir("$root/$writable")) {
            if (@chmod("$root/$writable", 0777)) {
                echo "      chmod 0777 $writable\n";
            } else {
                printError("Operation chmod not permitted for directory $writable.");
            }
        } else {
            printError("Directory $writable does not exist.");
        }
    }
}

/**
 * generate .env config
 */
function createEnv(): void
{
    $params = file(__DIR__ . '/.env.example');
    file_put_contents(__DIR__ . '/.env', '');

    foreach ($params as $param) {

        if (trim($param)) {
            if ($param{0} === '#') {
                file_put_contents(__DIR__ . '/.env', $param, FILE_APPEND);
            } else {
                $param = explode('=', $param);
                echo "Enter:\e[34m {$param[0]}\033[0m, default value - \e[32m" . trim($param[1]) . "\e[0m, please [ENTER] to skip:";
                $value = readline(' ');

                $conf = $value ? $param[0] . '=' . trim($value) : $param[0] . '=' . trim($param[1]);

                file_put_contents(__DIR__ . '/.env', $conf . PHP_EOL, FILE_APPEND);
                echo "\e[32m$conf\e[0m" . PHP_EOL;
            }
        } else {
            $param = PHP_EOL;
            file_put_contents(__DIR__ . '/.env', $param, FILE_APPEND);
        }
    }

    echo "      file .env configurated\n";

    (\Dotenv\Dotenv::create(__DIR__ . '/'))->load();
}

/**
 * create DB
 */
function createDb(): void
{
    $host = getenv('DB_HOST');
    $dbusername = getenv('DB_USERNAME');
    $dbpassword = getenv('DB_PASSWORD');
    $db_name = getenv('DB_NAME');

    $pdo = new PDO("mysql:host={$host}", $dbusername, $dbpassword);
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

    $pdo->query("CREATE DATABASE IF NOT EXISTS `{$db_name}` CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci");

    echo "      DATABASE $db_name created or exists\n";
}

/**
 * create symlink
 * @param $root
 * @param $links
 */
function createSymlink(string $root, array $links)
{
    foreach ($links as $link => $target) {
        //first removing folders to avoid errors if the folder already exists
        @rmdir($root . "/" . $link);
        //next removing existing symlink in order to update the target
        if (is_link($root . "/" . $link)) {
            @unlink($root . "/" . $link);
        }
        if (@symlink($root . "/" . $target, $root . "/" . $link)) {
            echo "      symlink $root/$target $root/$link\n";
        } else {
            printError("Cannot create symlink $root/$target $root/$link.");
        }
    }
}

/**
 * Prints error message.
 * @param string $message message
 */
function printError($message)
{
    echo "\n  " . formatMessage("Error. $message", ['fg-red']) . " \n";
}

/**
 * Formats message using styles if STDOUT supports it.
 * @param string $message message
 * @param string[] $styles styles
 * @return string formatted message.
 */
function formatMessage($message, $styles)
{
    if (empty($styles) || !ansiColorsSupported()) {
        return $message;
    }

    return sprintf("\x1b[%sm", implode(';', array_map('getStyleCode', $styles))) . $message . "\x1b[0m";
}

/**
 * Get ANSI code of style.
 * @param string $name style name
 * @return integer ANSI code of style.
 */
function getStyleCode($name)
{
    $styles = [
        'bold' => 1,
        'fg-black' => 30,
        'fg-red' => 31,
        'fg-green' => 32,
        'fg-yellow' => 33,
        'fg-blue' => 34,
        'fg-magenta' => 35,
        'fg-cyan' => 36,
        'fg-white' => 37,
        'bg-black' => 40,
        'bg-red' => 41,
        'bg-green' => 42,
        'bg-yellow' => 43,
        'bg-blue' => 44,
        'bg-magenta' => 45,
        'bg-cyan' => 46,
        'bg-white' => 47,
    ];
    return $styles[$name];
}

/**
 * Returns true if the stream supports colorization. ANSI colors are disabled if not supported by the stream.
 *
 * - windows without ansicon
 * - not tty consoles
 *
 * @return boolean true if the stream supports ANSI colors, otherwise false.
 */
function ansiColorsSupported()
{
    return DIRECTORY_SEPARATOR === '\\'
        ? getenv('ANSICON') !== false || getenv('ConEmuANSI') === 'ON'
        : function_exists('posix_isatty') && @posix_isatty(STDOUT);
}


